AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar project ID.
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ''

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  CustomDefaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: 'lambda'
      Handler: skill_handler.handler
      Runtime: python3.7
      MemorySize: 128
      Timeout: 8
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          aws_region: eu-west-1
          employee_table: bodoni-employees
      Events:
        AlexaSkillEvent:
          Type: AlexaSkill
      Layers:
        - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:ask-sdk-core:3'
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
  DynamoDBAccessPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [LambdaExecutionRole]
    Properties:
      PolicyName: DynamoDBAccessPolicy
      Roles: [!Ref LambdaExecutionRole]
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: [
              "dynamodb:Query"
            ]
            Resource: ["*"]
  SNSandSESAccessPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [LambdaExecutionRole]
    Properties:
      PolicyName: SNSandSESAccessPolicy
      Roles: [!Ref LambdaExecutionRole]
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: [
              "sns:Publish",
              "ses:SendEmail"
            ]
            Resource: ["*"]
Outputs:
  overrides:
    Value: !Sub |-
      {
        "manifest": {
          "apis": {
            "custom": {
              "endpoint": {
                "uri": "${CustomDefaultFunction.Alias}"
              }
            }
          }
        }
      }
